// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// API 템플릿 모델 - AI가 생성한 API 스펙과 코드를 저장
model Template {
  id            Int      @id @default(autoincrement())
  project       String   // 프로젝트명
  user          String   // 사용자명
  apiUrl        String   // API URL 경로
  method        String   // HTTP 메서드 (GET, POST, PUT, DELETE)
  apiName       String   // API 이름
  requestSpec   Json?    // 요청 스펙 (OpenAPI 형식)
  responseSpec  Json?    // 응답 스펙 (OpenAPI 형식)
  generatedCode String?  // 생성된 코드
  mockData      Json?    // Mock 데이터
  delayMs       Int      @default(0) // 응답 지연 시간 (밀리초)
  errorCode     Int?     // 에러 코드 (설정 시 해당 코드로 응답)
  isActive      Boolean  @default(true) // 활성화 여부
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // API 호출 기록과의 관계
  apiLogs ApiLog[]

  @@unique([project, user, apiUrl, method])
  @@map("templates")
}

// API 호출 기록 모델 - 생성된 API의 호출 로그를 저장
model ApiLog {
  id        Int      @id @default(autoincrement())
  templateId Int     // Template 테이블의 외래키
  requestBody Json?  // 요청 본문
  responseBody Json? // 응답 본문
  statusCode Int     // HTTP 상태 코드
  responseTime Int   // 응답 시간 (ms)
  userAgent String?  // 사용자 에이전트
  ipAddress String?  // IP 주소
  createdAt DateTime @default(now())

  // Template과의 관계
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("api_logs")
}

// 프록시 서버 설정 모델
model ProxyServer {
  id          Int      @id @default(autoincrement())
  name        String   // 프록시 서버 이름 (예: mobilemanager)
  targetUrl   String   // 목표 서버 URL (예: https://mobilemanager.com)
  description String?  // 설명
  isActive    Boolean  @default(true) // 활성화 여부
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Mock API와의 관계
  mockApis ProxyMockApi[]
  // 통신 로그와의 관계
  communicationLogs ProxyCommunicationLog[]

  @@unique([name])
  @@map("proxy_servers")
}

// 프록시 Mock API 모델
model ProxyMockApi {
  id            Int      @id @default(autoincrement())
  proxyServerId Int      // ProxyServer 테이블의 외래키
  path          String   // API 경로 (예: /xxx/yyy)
  method        String   // HTTP 메서드
  apiName       String   // API 이름
  requestSpec   Json?    // 요청 스펙
  responseSpec  Json?    // 응답 스펙
  mockData      Json?    // Mock 데이터
  delayMs       Int      @default(0) // 응답 지연 시간
  errorCode     Int?     // 에러 코드
  isActive      Boolean  @default(true) // 활성화 여부
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // ProxyServer와의 관계
  proxyServer ProxyServer @relation(fields: [proxyServerId], references: [id], onDelete: Cascade)

  // @@unique([proxyServerId, path, method]) 제거 - 같은 경로/메서드에 대해 여러 Mock API 생성 가능
  @@map("proxy_mock_apis")
}

// 프록시 통신 로그 모델
model ProxyCommunicationLog {
  id            Int      @id @default(autoincrement())
  proxyServerId Int      // ProxyServer 테이블의 외래키
  path          String   // API 경로 (예: /user/list)
  method        String   // HTTP 메서드
  requestBody   Json?    // 요청 본문
  responseBody  Json?    // 응답 본문
  statusCode    Int      // HTTP 상태 코드
  responseTime  Int      // 응답 시간 (ms)
  userAgent     String?  // 사용자 에이전트
  ipAddress     String?  // IP 주소
  isMock        Boolean  @default(false) // Mock API 사용 여부
  createdAt     DateTime @default(now())

  // ProxyServer와의 관계
  proxyServer ProxyServer @relation(fields: [proxyServerId], references: [id], onDelete: Cascade)

  // 인덱스 추가로 성능 최적화
  @@index([proxyServerId, path, method, createdAt])
  @@map("proxy_communication_logs")
}
